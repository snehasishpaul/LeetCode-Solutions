O(nlogn):
class Solution {
    public void sortColors(int[] nums) {
        Arrays.sort(nums);
    }
}

O(n):
class Solution {
    public void sortColors(int[] nums) {
        int num0 = 0;
        int num1 = 0;
        int num2 = 0;
        for(int num: nums) {
            if(num == 0)
                num0++;
            else if(num == 1)
                num1++;
            else
                num2++;
        }
        
        for(int i=0; i<num0; i++) {
            nums[i] = 0;
        }
        for(int i=num0; i<num0 + num1; i++) {
            nums[i] = 1;
        }
        for(int i=num0+num1; i<nums.length; i++) {
            nums[i] = 2;
        }
        
    }
}

O(n) with O(1) space comp BEST SOLUTION:
class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;
        int temp;
        
        while(mid <= high) {
            if(nums[mid] == 0) {
                temp = nums[low];
                nums[low++] = nums[mid];
                nums[mid++] = temp;
            } else if(nums[mid] == 1) {
                mid++;
            } else {
                temp = nums[high];
                nums[high--] = nums[mid];
                nums[mid] = temp;
            }
        }
    }
}